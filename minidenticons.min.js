const t=5;function e(e){return e.split("").reduce(((e,n)=>(e^n.charCodeAt(0))*-t),t)>>>2}export function minidenticon(t="",n={}){const s=Object.assign({saturation:95,lightness:45,hashFn:e,colors:9,padding:1.5},n),i=s.hashFn(t),o=i%s.colors*(360/s.colors)|0,d=(t,e,n=100,s=void 0)=>e>1?t%e*n/(e-1):s??n,a=0|d(i,s.saturationSteps,s.saturation),r=0|d(i,s.lightnessSteps,s.lightness);return[...Array(t?25:0)].reduce(((t,e,n)=>i&1<<n%15?t+`<rect x="${n>14?7-~~(n/5):~~(n/5)}" y="${n%5}" width="1" height="1"/>`:t),`<svg viewBox="${-s.padding} ${-s.padding} ${2*s.padding+5} ${2*s.padding+5}" xmlns="http://www.w3.org/2000/svg" fill="hsl(${o} ${a}% ${r}%)">`)+"</svg>"}export const minidenticonSvg=globalThis.customElements?.get("minidenticon-svg")?null:globalThis.customElements?.define("minidenticon-svg",class t extends HTMLElement{static observedAttributes=["username","saturation","lightness","padding","colors","saturationSteps","lightnessSteps"];static#t={};#e=!1;connectedCallback(){this.#n(),this.#e=!0}attributeChangedCallback(){this.#e&&this.#n()}#n(){const e=t.observedAttributes.map((t=>this.getAttribute(t)||void 0)),n=e.join(",");this.innerHTML=t.#t[n]??=minidenticon(this.getAttribute("username"),t.observedAttributes.reduce(((t,n,s)=>(null!=e[s]&&(t[n]=e[s]),t)),{}))}});